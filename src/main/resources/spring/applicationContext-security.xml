<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">


    <!--The following declaration would enable support for Spring Security’s @Secured
    <global-method-security secured-annotations="enabled" />
    -->

    <!--The following declaration would enable support for Spring Security’s @PreAuthorize-->
    <!-- See BookService.java !!-->
    <global-method-security pre-post-annotations="enabled" />

    <!-- This will protect all methods on beans declared in the application context whose classes are in the
    com.springHello package and whose class names end in "Service". Only users with the ROLE_USER role will be able
    to invoke these methods. -->
    <!--
    <global-method-security>
        <protect-pointcut expression="execution(* com.springHello.*Service.*(..))"
                          access="ROLE_USER"/>
    </global-method-security>
    -->


    <!-- desable security on resources folder-->
    <http pattern="/resources/**" security="none"/>


    <!-- http configuration "access-control"-->
    <http use-expressions="false">
        <intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/**" access="ROLE_ADMIN" />
        <!-- form login "/login" with Default Post-Login Destination "/books" -->
        <!-- For even more control over the destination,
        you can use the authentication-success-handler-ref-->
        <form-login login-page='/login'  default-target-url='/books'
                    always-use-default-target='true' />

        <!-- CSRF is enabled so you should send /logout in POST action -->
        <logout delete-cookies="JSESSIONID" logout-url="/logout" />

    </http>

    <!-- Adding a Password Encoder -->
    <beans:bean name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--
	Usernames/Passwords are
		rod/koala
	-->
    <!-- User authentication method " "-->
    <authentication-manager>
        <authentication-provider user-service-ref="userServiceImpl">
            <password-encoder ref="bcryptEncoder"/>
        </authentication-provider>
    </authentication-manager>
        <!--
        <authentication-provider>
        -->
            <!-- reference to bcryptEncoder bean -->
        <!--
            <password-encoder ref="bcryptEncoder"/>
        -->
            <!--  in-memory authentication -->
            <!--
            <user-service>
                <user name="jimi" password="d7e6351eaa13189a5a3641bab846c8e8c69ba39f"
                      authorities="ROLE_USER, ROLE_ADMIN" />
                <user name="rod" password="$2a$10$75pBjapg4Nl8Pzd.3JRnUe7PDJmk9qBGwNEJDAlA3V.dEJxcDKn5O"
                      authorities="ROLE_USER"/>
                <user name="bob" password="4e7421b1b8765d8f9406d87e7cc6aa784c4ab97f"
                      authorities="ROLE_USER" />
            </user-service>

        </authentication-provider>
    </authentication-manager>
    -->
    <beans:bean id="userServiceImpl" class="com.springHello.service.UserServiceImpl">
    </beans:bean>

</beans:beans>
